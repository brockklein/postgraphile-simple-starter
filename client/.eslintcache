[{"C:\\Users\\bckle\\Documents\\GitHub\\postgraphile-simple-starter\\client\\src\\index.tsx":"1","C:\\Users\\bckle\\Documents\\GitHub\\postgraphile-simple-starter\\client\\src\\reportWebVitals.ts":"2","C:\\Users\\bckle\\Documents\\GitHub\\postgraphile-simple-starter\\client\\src\\components\\App.tsx":"3","C:\\Users\\bckle\\Documents\\GitHub\\postgraphile-simple-starter\\client\\src\\components\\routes.tsx":"4","C:\\Users\\bckle\\Documents\\GitHub\\postgraphile-simple-starter\\client\\src\\components\\providers\\index.ts":"5","C:\\Users\\bckle\\Documents\\GitHub\\postgraphile-simple-starter\\client\\src\\components\\login.tsx":"6","C:\\Users\\bckle\\Documents\\GitHub\\postgraphile-simple-starter\\client\\src\\components\\signup.tsx":"7","C:\\Users\\bckle\\Documents\\GitHub\\postgraphile-simple-starter\\client\\src\\hooks\\index.ts":"8","C:\\Users\\bckle\\Documents\\GitHub\\postgraphile-simple-starter\\client\\src\\hooks\\use-alert.tsx":"9","C:\\Users\\bckle\\Documents\\GitHub\\postgraphile-simple-starter\\client\\src\\hooks\\use-auth.tsx":"10","C:\\Users\\bckle\\Documents\\GitHub\\postgraphile-simple-starter\\client\\src\\styles\\index.ts":"11","C:\\Users\\bckle\\Documents\\GitHub\\postgraphile-simple-starter\\client\\src\\stores\\app-state\\app-state-provider.tsx":"12","C:\\Users\\bckle\\Documents\\GitHub\\postgraphile-simple-starter\\client\\src\\graphql\\autogenerate\\hooks.tsx":"13","C:\\Users\\bckle\\Documents\\GitHub\\postgraphile-simple-starter\\client\\src\\stores\\app-state\\index.ts":"14","C:\\Users\\bckle\\Documents\\GitHub\\postgraphile-simple-starter\\client\\src\\stores\\app-state\\reducer.ts":"15","C:\\Users\\bckle\\Documents\\GitHub\\postgraphile-simple-starter\\client\\src\\stores\\app-state\\definitions.ts":"16","C:\\Users\\bckle\\Documents\\GitHub\\postgraphile-simple-starter\\client\\src\\styles\\use-padded-border.ts":"17","C:\\Users\\bckle\\Documents\\GitHub\\postgraphile-simple-starter\\client\\src\\styles\\use-form-styles.ts":"18","C:\\Users\\bckle\\Documents\\GitHub\\postgraphile-simple-starter\\client\\src\\hooks\\use-loading.tsx":"19","C:\\Users\\bckle\\Documents\\GitHub\\postgraphile-simple-starter\\client\\src\\hooks\\use-apollo-hook.tsx":"20","C:\\Users\\bckle\\Documents\\GitHub\\postgraphile-simple-starter\\client\\src\\components\\forms\\index.ts":"21","C:\\Users\\bckle\\Documents\\GitHub\\postgraphile-simple-starter\\client\\src\\components\\forms\\interfaces.ts":"22","C:\\Users\\bckle\\Documents\\GitHub\\postgraphile-simple-starter\\client\\src\\components\\forms\\password-field.tsx":"23","C:\\Users\\bckle\\Documents\\GitHub\\postgraphile-simple-starter\\client\\src\\components\\forms\\text-input.tsx":"24","C:\\Users\\bckle\\Documents\\GitHub\\postgraphile-simple-starter\\client\\src\\components\\forms\\constants.ts":"25","C:\\Users\\bckle\\Documents\\GitHub\\postgraphile-simple-starter\\client\\src\\components\\forms\\field-wrapper.tsx":"26","C:\\Users\\bckle\\Documents\\GitHub\\postgraphile-simple-starter\\client\\src\\components\\providers\\snackbar-provider.tsx":"27","C:\\Users\\bckle\\Documents\\GitHub\\postgraphile-simple-starter\\client\\src\\components\\providers\\theme-provider.tsx":"28","C:\\Users\\bckle\\Documents\\GitHub\\postgraphile-simple-starter\\client\\src\\components\\providers\\apollo-provider.tsx":"29","C:\\Users\\bckle\\Documents\\GitHub\\postgraphile-simple-starter\\client\\src\\components\\providers\\compose-providers.tsx":"30"},{"size":551,"mtime":1610687410610,"results":"31","hashOfConfig":"32"},{"size":425,"mtime":499162500000,"results":"33","hashOfConfig":"32"},{"size":803,"mtime":1610685501623,"results":"34","hashOfConfig":"32"},{"size":1129,"mtime":1610685501759,"results":"35","hashOfConfig":"32"},{"size":387,"mtime":1610685501727,"results":"36","hashOfConfig":"32"},{"size":3736,"mtime":1610686699725,"results":"37","hashOfConfig":"32"},{"size":4583,"mtime":1610686817721,"results":"38","hashOfConfig":"32"},{"size":191,"mtime":1610685501818,"results":"39","hashOfConfig":"32"},{"size":4496,"mtime":1610685501830,"results":"40","hashOfConfig":"32"},{"size":2873,"mtime":1610685501853,"results":"41","hashOfConfig":"32"},{"size":70,"mtime":1610685501937,"results":"42","hashOfConfig":"32"},{"size":811,"mtime":1610685501897,"results":"43","hashOfConfig":"32"},{"size":5663,"mtime":1610686076659,"results":"44","hashOfConfig":"32"},{"size":56,"mtime":1610685501917,"results":"45","hashOfConfig":"32"},{"size":567,"mtime":1610685501929,"results":"46","hashOfConfig":"32"},{"size":676,"mtime":1610685501909,"results":"47","hashOfConfig":"32"},{"size":448,"mtime":1610685501958,"results":"48","hashOfConfig":"32"},{"size":348,"mtime":1610685501945,"results":"49","hashOfConfig":"32"},{"size":3480,"mtime":1610685501865,"results":"50","hashOfConfig":"32"},{"size":1932,"mtime":1610685501841,"results":"51","hashOfConfig":"32"},{"size":92,"mtime":1610685501651,"results":"52","hashOfConfig":"32"},{"size":144,"mtime":1610685501667,"results":"53","hashOfConfig":"32"},{"size":1495,"mtime":1610685501675,"results":"54","hashOfConfig":"32"},{"size":885,"mtime":1610685501683,"results":"55","hashOfConfig":"32"},{"size":71,"mtime":1610685501631,"results":"56","hashOfConfig":"32"},{"size":808,"mtime":1610685501643,"results":"57","hashOfConfig":"32"},{"size":474,"mtime":1610685501739,"results":"58","hashOfConfig":"32"},{"size":662,"mtime":1610687038875,"results":"59","hashOfConfig":"32"},{"size":1168,"mtime":1610685501703,"results":"60","hashOfConfig":"32"},{"size":930,"mtime":1610685501715,"results":"61","hashOfConfig":"32"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},"1llwjhl",{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"64"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"64"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"64"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"64"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},"C:\\Users\\bckle\\Documents\\GitHub\\postgraphile-simple-starter\\client\\src\\index.tsx",[],["128","129"],"C:\\Users\\bckle\\Documents\\GitHub\\postgraphile-simple-starter\\client\\src\\reportWebVitals.ts",[],"C:\\Users\\bckle\\Documents\\GitHub\\postgraphile-simple-starter\\client\\src\\components\\App.tsx",[],"C:\\Users\\bckle\\Documents\\GitHub\\postgraphile-simple-starter\\client\\src\\components\\routes.tsx",[],"C:\\Users\\bckle\\Documents\\GitHub\\postgraphile-simple-starter\\client\\src\\components\\providers\\index.ts",[],"C:\\Users\\bckle\\Documents\\GitHub\\postgraphile-simple-starter\\client\\src\\components\\login.tsx",["130","131"],"import { Button, Grid, Box, Typography, } from '@material-ui/core'\r\nimport { useSnackbar } from 'notistack'\r\nimport { useLoadingOverlay } from '../hooks'\r\nimport { Form, Formik } from 'formik'\r\nimport * as Yup from 'yup'\r\nimport { PasswordField, TextInput } from './forms'\r\nimport clsx from 'clsx'\r\nimport logo from '../images/logo.svg'\r\nimport { useAuthenticateMutation } from '../graphql/autogenerate/hooks'\r\nimport { useEffect } from 'react'\r\nimport { usePaddedBorderStyles } from '../styles'\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport const Login = () => {\r\n\r\n    const classes = usePaddedBorderStyles()\r\n\r\n    const { enqueueSnackbar } = useSnackbar()\r\n\r\n    const [authenticate, { data, loading, error }] = useAuthenticateMutation()\r\n    useLoadingOverlay(loading)\r\n\r\n    useEffect(() => {\r\n        /* \r\n            A null jwtToken means the authentication failed for any reason (wrong password, account doesn't exist)\r\n        */\r\n        if (data && data.authenticate?.jwtToken === null) {\r\n            enqueueSnackbar(<div>Login failed. <span>Email and password do not match, or an account does not exist with the provided email address.</span></div>, { variant: 'error', preventDuplicate: false })\r\n        }\r\n    }, [data])\r\n\r\n    useEffect(() => {\r\n        if (error) enqueueSnackbar(error.message, { variant: 'error', preventDuplicate: false })\r\n    }, [error])\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{\r\n                email: '',\r\n                password: '',\r\n            }}\r\n            validationSchema={Yup.object({\r\n                email: Yup.string().required('Required'),\r\n                password: Yup.string().required('Required')\r\n            })}\r\n            onSubmit={(values) => {\r\n                authenticate({ variables: values })\r\n            }}\r\n        >\r\n            <Grid justify='center' container>\r\n                <Grid className={clsx(classes.borders)} container item xs={12} sm={10} md={8} lg={5} justify='center'>\r\n                    <Form style={{ width: '100%' }}>\r\n                        <Grid item container justify='center' alignContent='center' direction='column'>\r\n                            <Box marginBottom={2}>\r\n                                <Link to='/signup'><img src={logo} alt='Legit Apps logo' style={{ maxWidth: 75 }} /></Link>\r\n                            </Box>\r\n                            <Box marginBottom={4}>\r\n                                <Typography variant='h5' align='center'>Sign in</Typography>\r\n                            </Box>\r\n                        </Grid>\r\n                        <Grid item container>\r\n                            <TextInput fieldProps={{ name: 'email', label: 'Email', helperText: 'Email address' }} />\r\n                        </Grid>\r\n                        <Grid item container>\r\n                            <PasswordField fieldProps={{ name: 'password', label: 'Password', labelWidth: 70 }} />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Box marginX={1} marginY={2} display='flex' justifyContent='space-between'>\r\n                                <Button href='https://www.google.com/' target='_blank' variant='text' color='primary' disableElevation>\r\n                                    Forgot password\r\n                                </Button>\r\n                                <Button type='submit' style={{ minWidth: 100 }} variant='contained' color='primary' disableElevation>\r\n                                    Login\r\n                                </Button>\r\n                            </Box>\r\n                        </Grid>\r\n                    </Form>\r\n                </Grid>\r\n            </Grid>\r\n        </Formik>\r\n    )\r\n}","C:\\Users\\bckle\\Documents\\GitHub\\postgraphile-simple-starter\\client\\src\\components\\signup.tsx",[],"C:\\Users\\bckle\\Documents\\GitHub\\postgraphile-simple-starter\\client\\src\\hooks\\index.ts",[],"C:\\Users\\bckle\\Documents\\GitHub\\postgraphile-simple-starter\\client\\src\\hooks\\use-alert.tsx",[],"C:\\Users\\bckle\\Documents\\GitHub\\postgraphile-simple-starter\\client\\src\\hooks\\use-auth.tsx",["132","133","134"],"import { MutationFunctionOptions } from '@apollo/react-hooks'\r\nimport { useSnackbar } from 'notistack'\r\nimport React, { useEffect, useContext, createContext, FunctionComponent } from 'react'\r\nimport { useLocalStorage } from 'react-use'\r\nimport { useAppState, useLoadingOverlay } from '.'\r\nimport { useCurrentUserLazyQuery, useRegisterUserMutation } from '../graphql/autogenerate/hooks'\r\nimport { RegisterUserMutation, RegisterUserMutationVariables } from '../graphql/autogenerate/operations'\r\nimport { AppActionType } from '../stores/app-state'\r\n\r\ninterface IAuthContext {\r\n    registerUser: (options?: MutationFunctionOptions<RegisterUserMutation, RegisterUserMutationVariables>) => Promise<any>\r\n}\r\nconst AuthContext = createContext<IAuthContext | undefined>(undefined)\r\n\r\n// Hook for child components to get the auth object and re-render when it changes.\r\nexport const useAuth = () => {\r\n    const context = useContext(AuthContext)\r\n    if (!context) throw new Error(`Attempted to use AuthContext before it's provider.`)\r\n    return context\r\n}\r\n\r\n// Provider component that wraps your app and makes auth object available to any child component that calls useAuth().\r\nexport const AuthProvider: FunctionComponent = ({ children }) => {\r\n    const { enqueueSnackbar } = useSnackbar()\r\n\r\n    const { state, dispatch } = useAppState()\r\n\r\n    const [, setLocalStorageJwt, clearLocalStorageJwt] = useLocalStorage<string>('jwt', undefined, { raw: true })\r\n\r\n    const [currentUserQuery, currentUserQueryStatus] = useCurrentUserLazyQuery({ pollInterval: 1000 })\r\n\r\n    const [registerUser, registerUserStatus] = useRegisterUserMutation()\r\n    useLoadingOverlay(registerUserStatus.loading)\r\n\r\n    useEffect(() => {\r\n        if (registerUserStatus.error) enqueueSnackbar(`${registerUserStatus.error.name} - ${registerUserStatus.error.message}`, { variant: 'error', preventDuplicate: false })\r\n        if (registerUserStatus.data) dispatch({ type: AppActionType.setJwt, payload: { jwt: registerUserStatus.data?.registerUser?.jwtToken } })\r\n    }, [registerUserStatus.error, registerUserStatus.data])\r\n\r\n    useEffect(() => {\r\n        if (currentUserQueryStatus.error) enqueueSnackbar(`${currentUserQueryStatus.error.name} - ${currentUserQueryStatus.error.message}`, { variant: 'error', preventDuplicate: false })\r\n        dispatch({ type: AppActionType.setUser, payload: { user: currentUserQueryStatus.data } })\r\n    }, [currentUserQueryStatus.error, currentUserQueryStatus.data])\r\n\r\n    useEffect(() => {\r\n        if (state.jwt) {\r\n            currentUserQuery()\r\n            setLocalStorageJwt(state.jwt)\r\n        } else {\r\n            currentUserQueryStatus.stopPolling && currentUserQueryStatus.stopPolling()\r\n            clearLocalStorageJwt()\r\n        }\r\n    }, [state.jwt])\r\n\r\n    return <AuthContext.Provider value={{ registerUser }}>{children}</AuthContext.Provider>\r\n}\r\n\r\n","C:\\Users\\bckle\\Documents\\GitHub\\postgraphile-simple-starter\\client\\src\\styles\\index.ts",[],"C:\\Users\\bckle\\Documents\\GitHub\\postgraphile-simple-starter\\client\\src\\stores\\app-state\\app-state-provider.tsx",[],"C:\\Users\\bckle\\Documents\\GitHub\\postgraphile-simple-starter\\client\\src\\graphql\\autogenerate\\hooks.tsx",[],"C:\\Users\\bckle\\Documents\\GitHub\\postgraphile-simple-starter\\client\\src\\stores\\app-state\\index.ts",[],"C:\\Users\\bckle\\Documents\\GitHub\\postgraphile-simple-starter\\client\\src\\stores\\app-state\\reducer.ts",[],"C:\\Users\\bckle\\Documents\\GitHub\\postgraphile-simple-starter\\client\\src\\stores\\app-state\\definitions.ts",[],"C:\\Users\\bckle\\Documents\\GitHub\\postgraphile-simple-starter\\client\\src\\styles\\use-padded-border.ts",[],"C:\\Users\\bckle\\Documents\\GitHub\\postgraphile-simple-starter\\client\\src\\styles\\use-form-styles.ts",[],"C:\\Users\\bckle\\Documents\\GitHub\\postgraphile-simple-starter\\client\\src\\hooks\\use-loading.tsx",["135"],"import { Fade, CircularProgress, makeStyles, Backdrop } from '@material-ui/core'\r\nimport React, { useState, useEffect, useContext, createContext, FunctionComponent } from 'react'\r\nimport { v4 as uuid } from 'uuid'\r\n\r\n\r\nconst useProvideLoading = () => {\r\n    const [inProgressProcess, setInProgressProcesses] = useState<{ [id: string]: boolean }>({})\r\n    const [loading, setLoading] = useState(false)\r\n\r\n    const addLoadingProcess = (id: string) => {\r\n        setInProgressProcesses({ ...inProgressProcess, [id]: true })\r\n        return id\r\n    }\r\n\r\n    /* \r\n        Some fancy syntactical footwork to:\r\n        1) Write an immediately invoked anonymous function that is called passing in the current object\r\n        2) In the arguments of the function, destructure the object into two objects, one with just the key we're removing and one with the remaining keys\r\n        3) Return just the remaining keys out of the function\r\n    */\r\n    const removeLoadingProcess = (id: string) => setInProgressProcesses((({ [id]: _, ...remaining }) => remaining)(inProgressProcess))\r\n\r\n    useEffect(() => {\r\n        if (Object.keys(inProgressProcess).length === 0) {\r\n            setLoading(false)\r\n        } else {\r\n            setLoading(true)\r\n        }\r\n    }, [inProgressProcess])\r\n\r\n    return {\r\n        loading,\r\n        addLoadingProcess,\r\n        removeLoadingProcess\r\n    }\r\n}\r\n\r\ninterface ILoadingContext {\r\n    loading: boolean\r\n    addLoadingProcess: (id: string) => string\r\n    removeLoadingProcess: (id: string) => void\r\n}\r\nconst LoadingContext = createContext<ILoadingContext | null>(null)\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    backdrop: {\r\n        zIndex: theme.zIndex.drawer + 1,\r\n        color: theme.palette.primary.main,\r\n    },\r\n}))\r\n\r\nexport const LoadingProvider: FunctionComponent = ({ children }) => {\r\n    const classes = useStyles()\r\n\r\n    const loadingState = useProvideLoading()\r\n    const { loading } = loadingState\r\n\r\n    return (\r\n        <LoadingContext.Provider value={loadingState}>\r\n            <Fade\r\n                in={loading}\r\n                style={{\r\n                    transitionDelay: loading ? '800ms' : '0ms',\r\n                }}\r\n                unmountOnExit\r\n            >\r\n                <Backdrop className={classes.backdrop} open={loading}>\r\n                    <CircularProgress color='inherit' size={100} />\r\n                </Backdrop>\r\n            </Fade>\r\n            {children}\r\n        </LoadingContext.Provider>\r\n    )\r\n}\r\n\r\n/* \r\n    Go ahead and expose the loading state to the whole app in case a \r\n    component wants to directly manage the IDs associated with a loading process\r\n    instead of using the useLoading() convenience hook.\r\n*/\r\nexport const useLoadingState = () => useContext(LoadingContext)!\r\n\r\n/** \r\n    __useLoading__\r\n\r\n    Convenience wrapper hook to manage a process ID associated with loading.\r\n\r\n    @example\r\n    const [dataLoadingStart, dataLoadingDone] = useLoading()\r\n    const [otherLoadingStart, otherLoadingDone] = useLoading()\r\n**/\r\nexport const useLoadingOverlay = (loading?: boolean) => {\r\n\r\n    const loadingState = useContext(LoadingContext)!\r\n    const [id] = useState(uuid())\r\n    const loadingStart = () => loadingState.addLoadingProcess(id)\r\n    const doneLoading = () => loadingState.removeLoadingProcess(id)\r\n\r\n    useEffect(() => {\r\n        if (loading) loadingStart()\r\n        if (!loading) doneLoading()\r\n    }, [loading])\r\n\r\n    return [loadingStart, doneLoading]\r\n}","C:\\Users\\bckle\\Documents\\GitHub\\postgraphile-simple-starter\\client\\src\\hooks\\use-apollo-hook.tsx",[],"C:\\Users\\bckle\\Documents\\GitHub\\postgraphile-simple-starter\\client\\src\\components\\forms\\index.ts",[],"C:\\Users\\bckle\\Documents\\GitHub\\postgraphile-simple-starter\\client\\src\\components\\forms\\interfaces.ts",[],"C:\\Users\\bckle\\Documents\\GitHub\\postgraphile-simple-starter\\client\\src\\components\\forms\\password-field.tsx",["136"],"import { IField } from \"./interfaces\"\r\nimport { InputAdornment, OutlinedInput, IconButton, FormHelperText } from '@material-ui/core'\r\nimport { useField } from \"formik\"\r\nimport { useState } from \"react\"\r\nimport { Visibility, VisibilityOff } from '@material-ui/icons'\r\nimport { FieldWrapper } from \"./field-wrapper\"\r\n\r\ninterface IPasswordField extends IField {\r\n    labelWidth?: number\r\n}\r\n\r\nexport const PasswordField = ({ fieldProps }: { fieldProps: IPasswordField }) => {\r\n    const [field, meta] = useField(fieldProps)\r\n\r\n    const [showPassword, setShowPassword] = useState(true)\r\n\r\n    return (\r\n        <FieldWrapper {...fieldProps} error={meta.error}>\r\n            <OutlinedInput\r\n                {...field}\r\n                error={(meta.touched && !!meta.error) || !!meta.initialError}\r\n                type={showPassword ? 'text' : 'password'}\r\n                endAdornment={\r\n                    <InputAdornment position=\"end\">\r\n                        <IconButton\r\n                            aria-label='toggle password visibility'\r\n                            onClick={() => setShowPassword(!showPassword)}\r\n                            onMouseDown={(e) => e.preventDefault()}\r\n                        >\r\n                            {showPassword ? <Visibility /> : <VisibilityOff />}\r\n                        </IconButton>\r\n                    </InputAdornment>\r\n                }\r\n                labelWidth={fieldProps.labelWidth}\r\n            />\r\n        </FieldWrapper>\r\n    )\r\n}","C:\\Users\\bckle\\Documents\\GitHub\\postgraphile-simple-starter\\client\\src\\components\\forms\\text-input.tsx",[],"C:\\Users\\bckle\\Documents\\GitHub\\postgraphile-simple-starter\\client\\src\\components\\forms\\constants.ts",[],"C:\\Users\\bckle\\Documents\\GitHub\\postgraphile-simple-starter\\client\\src\\components\\forms\\field-wrapper.tsx",[],"C:\\Users\\bckle\\Documents\\GitHub\\postgraphile-simple-starter\\client\\src\\components\\providers\\snackbar-provider.tsx",[],"C:\\Users\\bckle\\Documents\\GitHub\\postgraphile-simple-starter\\client\\src\\components\\providers\\theme-provider.tsx",[],"C:\\Users\\bckle\\Documents\\GitHub\\postgraphile-simple-starter\\client\\src\\components\\providers\\apollo-provider.tsx",[],["137","138"],"C:\\Users\\bckle\\Documents\\GitHub\\postgraphile-simple-starter\\client\\src\\components\\providers\\compose-providers.tsx",[],{"ruleId":"139","replacedBy":"140"},{"ruleId":"141","replacedBy":"142"},{"ruleId":"143","severity":1,"message":"144","line":30,"column":8,"nodeType":"145","endLine":30,"endColumn":14,"suggestions":"146"},{"ruleId":"143","severity":1,"message":"144","line":34,"column":8,"nodeType":"145","endLine":34,"endColumn":15,"suggestions":"147"},{"ruleId":"143","severity":1,"message":"148","line":38,"column":8,"nodeType":"145","endLine":38,"endColumn":59,"suggestions":"149"},{"ruleId":"143","severity":1,"message":"148","line":43,"column":8,"nodeType":"145","endLine":43,"endColumn":67,"suggestions":"150"},{"ruleId":"143","severity":1,"message":"151","line":53,"column":8,"nodeType":"145","endLine":53,"endColumn":19,"suggestions":"152"},{"ruleId":"143","severity":1,"message":"153","line":102,"column":8,"nodeType":"145","endLine":102,"endColumn":17,"suggestions":"154"},{"ruleId":"155","severity":1,"message":"156","line":2,"column":53,"nodeType":"157","messageId":"158","endLine":2,"endColumn":67},{"ruleId":"139","replacedBy":"159"},{"ruleId":"141","replacedBy":"160"},"no-native-reassign",["161"],"no-negated-in-lhs",["162"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'enqueueSnackbar'. Either include it or remove the dependency array.","ArrayExpression",["163"],["164"],"React Hook useEffect has missing dependencies: 'dispatch' and 'enqueueSnackbar'. Either include them or remove the dependency array.",["165"],["166"],"React Hook useEffect has missing dependencies: 'clearLocalStorageJwt', 'currentUserQuery', 'currentUserQueryStatus', and 'setLocalStorageJwt'. Either include them or remove the dependency array.",["167"],"React Hook useEffect has missing dependencies: 'doneLoading' and 'loadingStart'. Either include them or remove the dependency array.",["168"],"@typescript-eslint/no-unused-vars","'FormHelperText' is defined but never used.","Identifier","unusedVar",["161"],["162"],"no-global-assign","no-unsafe-negation",{"desc":"169","fix":"170"},{"desc":"171","fix":"172"},{"desc":"173","fix":"174"},{"desc":"175","fix":"176"},{"desc":"177","fix":"178"},{"desc":"179","fix":"180"},"Update the dependencies array to be: [data, enqueueSnackbar]",{"range":"181","text":"182"},"Update the dependencies array to be: [enqueueSnackbar, error]",{"range":"183","text":"184"},"Update the dependencies array to be: [registerUserStatus.error, registerUserStatus.data, enqueueSnackbar, dispatch]",{"range":"185","text":"186"},"Update the dependencies array to be: [currentUserQueryStatus.error, currentUserQueryStatus.data, enqueueSnackbar, dispatch]",{"range":"187","text":"188"},"Update the dependencies array to be: [clearLocalStorageJwt, currentUserQuery, currentUserQueryStatus, setLocalStorageJwt, state.jwt]",{"range":"189","text":"190"},"Update the dependencies array to be: [doneLoading, loading, loadingStart]",{"range":"191","text":"192"},[1235,1241],"[data, enqueueSnackbar]",[1374,1381],"[enqueueSnackbar, error]",[2038,2089],"[registerUserStatus.error, registerUserStatus.data, enqueueSnackbar, dispatch]",[2411,2470],"[currentUserQueryStatus.error, currentUserQueryStatus.data, enqueueSnackbar, dispatch]",[2759,2770],"[clearLocalStorageJwt, currentUserQuery, currentUserQueryStatus, setLocalStorageJwt, state.jwt]",[3425,3434],"[doneLoading, loading, loadingStart]"]