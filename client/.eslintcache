[{"C:\\Users\\Brock\\Documents\\GitHub\\Legit Apps\\postgraphile-simple-starter\\client\\src\\index.tsx":"1","C:\\Users\\Brock\\Documents\\GitHub\\Legit Apps\\postgraphile-simple-starter\\client\\src\\reportWebVitals.ts":"2","C:\\Users\\Brock\\Documents\\GitHub\\Legit Apps\\postgraphile-simple-starter\\client\\src\\components\\App.tsx":"3","C:\\Users\\Brock\\Documents\\GitHub\\Legit Apps\\postgraphile-simple-starter\\client\\src\\components\\routes.tsx":"4","C:\\Users\\Brock\\Documents\\GitHub\\Legit Apps\\postgraphile-simple-starter\\client\\src\\hooks\\use-auth.tsx":"5","C:\\Users\\Brock\\Documents\\GitHub\\Legit Apps\\postgraphile-simple-starter\\client\\src\\hooks\\use-alert.tsx":"6","C:\\Users\\Brock\\Documents\\GitHub\\Legit Apps\\postgraphile-simple-starter\\client\\src\\hooks\\use-loading.tsx":"7","C:\\Users\\Brock\\Documents\\GitHub\\Legit Apps\\postgraphile-simple-starter\\client\\src\\components\\login.tsx":"8","C:\\Users\\Brock\\Documents\\GitHub\\Legit Apps\\postgraphile-simple-starter\\client\\src\\graphql\\autogenerate\\hooks.tsx":"9","C:\\Users\\Brock\\Documents\\GitHub\\Legit Apps\\postgraphile-simple-starter\\client\\src\\hooks\\index.ts":"10","C:\\Users\\Brock\\Documents\\GitHub\\Legit Apps\\postgraphile-simple-starter\\client\\src\\hooks\\use-apollo-hook.tsx":"11","C:\\Users\\Brock\\Documents\\GitHub\\Legit Apps\\postgraphile-simple-starter\\client\\src\\components\\forms\\index.ts":"12","C:\\Users\\Brock\\Documents\\GitHub\\Legit Apps\\postgraphile-simple-starter\\client\\src\\components\\forms\\interfaces.ts":"13","C:\\Users\\Brock\\Documents\\GitHub\\Legit Apps\\postgraphile-simple-starter\\client\\src\\components\\forms\\password-field.tsx":"14","C:\\Users\\Brock\\Documents\\GitHub\\Legit Apps\\postgraphile-simple-starter\\client\\src\\components\\forms\\text-input.tsx":"15","C:\\Users\\Brock\\Documents\\GitHub\\Legit Apps\\postgraphile-simple-starter\\client\\src\\components\\forms\\constants.ts":"16","C:\\Users\\Brock\\Documents\\GitHub\\Legit Apps\\postgraphile-simple-starter\\client\\src\\components\\forms\\field-wrapper.tsx":"17","C:\\Users\\Brock\\Documents\\GitHub\\Legit Apps\\postgraphile-simple-starter\\client\\src\\styles\\use-form-styles.ts":"18","C:\\Users\\Brock\\Documents\\GitHub\\Legit Apps\\postgraphile-simple-starter\\client\\src\\components\\providers\\index.ts":"19","C:\\Users\\Brock\\Documents\\GitHub\\Legit Apps\\postgraphile-simple-starter\\client\\src\\components\\providers\\theme-provider.tsx":"20","C:\\Users\\Brock\\Documents\\GitHub\\Legit Apps\\postgraphile-simple-starter\\client\\src\\components\\providers\\compose-providers.tsx":"21","C:\\Users\\Brock\\Documents\\GitHub\\Legit Apps\\postgraphile-simple-starter\\client\\src\\components\\providers\\apollo-provider.tsx":"22","C:\\Users\\Brock\\Documents\\GitHub\\Legit Apps\\postgraphile-simple-starter\\client\\src\\components\\providers\\snackbar-provider.tsx":"23","C:\\Users\\Brock\\Documents\\GitHub\\Legit Apps\\postgraphile-simple-starter\\client\\src\\styles\\index.ts":"24","C:\\Users\\Brock\\Documents\\GitHub\\Legit Apps\\postgraphile-simple-starter\\client\\src\\styles\\use-padded-border.ts":"25","C:\\Users\\Brock\\Documents\\GitHub\\Legit Apps\\postgraphile-simple-starter\\client\\src\\components\\signup.tsx":"26","C:\\Users\\Brock\\Documents\\GitHub\\Legit Apps\\postgraphile-simple-starter\\client\\src\\stores\\app-state\\index.ts":"27","C:\\Users\\Brock\\Documents\\GitHub\\Legit Apps\\postgraphile-simple-starter\\client\\src\\stores\\app-state\\app-state-provider.tsx":"28","C:\\Users\\Brock\\Documents\\GitHub\\Legit Apps\\postgraphile-simple-starter\\client\\src\\stores\\app-state\\reducer.ts":"29","C:\\Users\\Brock\\Documents\\GitHub\\Legit Apps\\postgraphile-simple-starter\\client\\src\\stores\\app-state\\definitions.ts":"30"},{"size":523,"mtime":1610589577172,"results":"31","hashOfConfig":"32"},{"size":440,"mtime":1610480346839,"results":"33","hashOfConfig":"32"},{"size":803,"mtime":1610668670599,"results":"34","hashOfConfig":"32"},{"size":1129,"mtime":1610672294798,"results":"35","hashOfConfig":"32"},{"size":2873,"mtime":1610673644738,"results":"36","hashOfConfig":"32"},{"size":4496,"mtime":1610494126433,"results":"37","hashOfConfig":"32"},{"size":3480,"mtime":1610639375654,"results":"38","hashOfConfig":"32"},{"size":3714,"mtime":1610663247472,"results":"39","hashOfConfig":"32"},{"size":5663,"mtime":1610663093003,"results":"40","hashOfConfig":"32"},{"size":191,"mtime":1610668553903,"results":"41","hashOfConfig":"32"},{"size":1932,"mtime":1610638898274,"results":"42","hashOfConfig":"32"},{"size":92,"mtime":1610588672825,"results":"43","hashOfConfig":"32"},{"size":144,"mtime":1610588672828,"results":"44","hashOfConfig":"32"},{"size":1495,"mtime":1610663791599,"results":"45","hashOfConfig":"32"},{"size":885,"mtime":1610645918861,"results":"46","hashOfConfig":"32"},{"size":71,"mtime":1610588672825,"results":"47","hashOfConfig":"32"},{"size":808,"mtime":1610649375083,"results":"48","hashOfConfig":"32"},{"size":348,"mtime":1610629662791,"results":"49","hashOfConfig":"32"},{"size":387,"mtime":1610668673273,"results":"50","hashOfConfig":"32"},{"size":661,"mtime":1610650580862,"results":"51","hashOfConfig":"32"},{"size":930,"mtime":1610632958133,"results":"52","hashOfConfig":"32"},{"size":1168,"mtime":1610673644708,"results":"53","hashOfConfig":"32"},{"size":474,"mtime":1610632961590,"results":"54","hashOfConfig":"32"},{"size":70,"mtime":1610645623736,"results":"55","hashOfConfig":"32"},{"size":448,"mtime":1610645623736,"results":"56","hashOfConfig":"32"},{"size":4449,"mtime":1610671278953,"results":"57","hashOfConfig":"32"},{"size":56,"mtime":1610668511056,"results":"58","hashOfConfig":"32"},{"size":811,"mtime":1610673664182,"results":"59","hashOfConfig":"32"},{"size":567,"mtime":1610670927636,"results":"60","hashOfConfig":"32"},{"size":676,"mtime":1610670927635,"results":"61","hashOfConfig":"32"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},"14zdbcv",{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"64"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"64"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"64"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},"C:\\Users\\Brock\\Documents\\GitHub\\Legit Apps\\postgraphile-simple-starter\\client\\src\\index.tsx",[],["126","127"],"C:\\Users\\Brock\\Documents\\GitHub\\Legit Apps\\postgraphile-simple-starter\\client\\src\\reportWebVitals.ts",[],"C:\\Users\\Brock\\Documents\\GitHub\\Legit Apps\\postgraphile-simple-starter\\client\\src\\components\\App.tsx",[],"C:\\Users\\Brock\\Documents\\GitHub\\Legit Apps\\postgraphile-simple-starter\\client\\src\\components\\routes.tsx",[],"C:\\Users\\Brock\\Documents\\GitHub\\Legit Apps\\postgraphile-simple-starter\\client\\src\\hooks\\use-auth.tsx",["128","129","130"],"C:\\Users\\Brock\\Documents\\GitHub\\Legit Apps\\postgraphile-simple-starter\\client\\src\\hooks\\use-alert.tsx",[],"C:\\Users\\Brock\\Documents\\GitHub\\Legit Apps\\postgraphile-simple-starter\\client\\src\\hooks\\use-loading.tsx",["131"],"import { Fade, CircularProgress, makeStyles, Backdrop } from '@material-ui/core'\r\nimport React, { useState, useEffect, useContext, createContext, FunctionComponent } from 'react'\r\nimport { v4 as uuid } from 'uuid'\r\n\r\n\r\nconst useProvideLoading = () => {\r\n    const [inProgressProcess, setInProgressProcesses] = useState<{ [id: string]: boolean }>({})\r\n    const [loading, setLoading] = useState(false)\r\n\r\n    const addLoadingProcess = (id: string) => {\r\n        setInProgressProcesses({ ...inProgressProcess, [id]: true })\r\n        return id\r\n    }\r\n\r\n    /* \r\n        Some fancy syntactical footwork to:\r\n        1) Write an immediately invoked anonymous function that is called passing in the current object\r\n        2) In the arguments of the function, destructure the object into two objects, one with just the key we're removing and one with the remaining keys\r\n        3) Return just the remaining keys out of the function\r\n    */\r\n    const removeLoadingProcess = (id: string) => setInProgressProcesses((({ [id]: _, ...remaining }) => remaining)(inProgressProcess))\r\n\r\n    useEffect(() => {\r\n        if (Object.keys(inProgressProcess).length === 0) {\r\n            setLoading(false)\r\n        } else {\r\n            setLoading(true)\r\n        }\r\n    }, [inProgressProcess])\r\n\r\n    return {\r\n        loading,\r\n        addLoadingProcess,\r\n        removeLoadingProcess\r\n    }\r\n}\r\n\r\ninterface ILoadingContext {\r\n    loading: boolean\r\n    addLoadingProcess: (id: string) => string\r\n    removeLoadingProcess: (id: string) => void\r\n}\r\nconst LoadingContext = createContext<ILoadingContext | null>(null)\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    backdrop: {\r\n        zIndex: theme.zIndex.drawer + 1,\r\n        color: theme.palette.primary.main,\r\n    },\r\n}))\r\n\r\nexport const LoadingProvider: FunctionComponent = ({ children }) => {\r\n    const classes = useStyles()\r\n\r\n    const loadingState = useProvideLoading()\r\n    const { loading } = loadingState\r\n\r\n    return (\r\n        <LoadingContext.Provider value={loadingState}>\r\n            <Fade\r\n                in={loading}\r\n                style={{\r\n                    transitionDelay: loading ? '800ms' : '0ms',\r\n                }}\r\n                unmountOnExit\r\n            >\r\n                <Backdrop className={classes.backdrop} open={loading}>\r\n                    <CircularProgress color='inherit' size={100} />\r\n                </Backdrop>\r\n            </Fade>\r\n            {children}\r\n        </LoadingContext.Provider>\r\n    )\r\n}\r\n\r\n/* \r\n    Go ahead and expose the loading state to the whole app in case a \r\n    component wants to directly manage the IDs associated with a loading process\r\n    instead of using the useLoading() convenience hook.\r\n*/\r\nexport const useLoadingState = () => useContext(LoadingContext)!\r\n\r\n/** \r\n    __useLoading__\r\n\r\n    Convenience wrapper hook to manage a process ID associated with loading.\r\n\r\n    @example\r\n    const [dataLoadingStart, dataLoadingDone] = useLoading()\r\n    const [otherLoadingStart, otherLoadingDone] = useLoading()\r\n**/\r\nexport const useLoadingOverlay = (loading?: boolean) => {\r\n\r\n    const loadingState = useContext(LoadingContext)!\r\n    const [id] = useState(uuid())\r\n    const loadingStart = () => loadingState.addLoadingProcess(id)\r\n    const doneLoading = () => loadingState.removeLoadingProcess(id)\r\n\r\n    useEffect(() => {\r\n        if (loading) loadingStart()\r\n        if (!loading) doneLoading()\r\n    }, [loading])\r\n\r\n    return [loadingStart, doneLoading]\r\n}","C:\\Users\\Brock\\Documents\\GitHub\\Legit Apps\\postgraphile-simple-starter\\client\\src\\components\\login.tsx",["132","133","134"],"import { Button, Grid, Box, Typography, Link, } from '@material-ui/core'\r\nimport { useSnackbar } from 'notistack'\r\nimport { useLoadingOverlay } from '../hooks'\r\nimport { Form, Formik } from 'formik'\r\nimport * as Yup from 'yup'\r\nimport { PasswordField, TextInput } from './forms'\r\nimport clsx from 'clsx'\r\nimport logo from '../images/logo.svg'\r\nimport { useAuthenticateMutation } from '../graphql/autogenerate/hooks'\r\nimport { useEffect, useMemo } from 'react'\r\nimport { usePaddedBorderStyles } from '../styles'\r\n\r\n\r\nexport const Login = () => {\r\n\r\n    const classes = usePaddedBorderStyles()\r\n\r\n    const { enqueueSnackbar } = useSnackbar()\r\n\r\n    const [authenticate, { data, loading, error }] = useAuthenticateMutation()\r\n    useLoadingOverlay(loading)\r\n\r\n    useEffect(() => {\r\n        /* \r\n            A null jwtToken means the authentication failed for any reason (wrong password, account doesn't exist)\r\n        */\r\n        if (data && data.authenticate?.jwtToken === null) {\r\n            enqueueSnackbar(<div>Login failed. <span>Email and password do not match, or an account does not exist with the provided email address.</span></div>, { variant: 'error', preventDuplicate: false })\r\n        }\r\n    }, [data])\r\n\r\n    useEffect(() => {\r\n        if (error) enqueueSnackbar(error.message, { variant: 'error', preventDuplicate: false })\r\n    }, [error])\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{\r\n                email: '',\r\n                password: '',\r\n            }}\r\n            validationSchema={Yup.object({\r\n                email: Yup.string().required('Required'),\r\n                password: Yup.string().required('Required')\r\n            })}\r\n            onSubmit={(values) => {\r\n                authenticate({ variables: values })\r\n            }}\r\n        >\r\n            <Grid justify='center' container>\r\n                <Grid className={clsx(classes.borders)} container item xs={12} sm={10} md={8} lg={5} justify='center'>\r\n                    <Form style={{ width: '100%' }}>\r\n                        <Grid item container justify='center' alignContent='center' direction='column'>\r\n                            <Box marginBottom={2}>\r\n                                <Link href='/signup'><img src={logo} alt='Legit Apps logo' style={{ maxWidth: 75 }} /></Link>\r\n                            </Box>\r\n                            <Box marginBottom={4}>\r\n                                <Typography variant='h5' align='center'>Sign in</Typography>\r\n                            </Box>\r\n                        </Grid>\r\n                        <Grid item container>\r\n                            <TextInput fieldProps={{ name: 'email', label: 'Email', helperText: 'Email address' }} />\r\n                        </Grid>\r\n                        <Grid item container>\r\n                            <PasswordField fieldProps={{ name: 'password', label: 'Password', labelWidth: 70 }} />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Box marginX={1} marginY={2} display='flex' justifyContent='space-between'>\r\n                                <Button href='https://www.google.com/' target='_blank' variant='text' color='primary' disableElevation>\r\n                                    Forgot password\r\n                                </Button>\r\n                                <Button type='submit' style={{ minWidth: 100 }} variant='contained' color='primary' disableElevation>\r\n                                    Login\r\n                                </Button>\r\n                            </Box>\r\n                        </Grid>\r\n                    </Form>\r\n                </Grid>\r\n            </Grid>\r\n        </Formik>\r\n    )\r\n}","C:\\Users\\Brock\\Documents\\GitHub\\Legit Apps\\postgraphile-simple-starter\\client\\src\\graphql\\autogenerate\\hooks.tsx",[],"C:\\Users\\Brock\\Documents\\GitHub\\Legit Apps\\postgraphile-simple-starter\\client\\src\\hooks\\index.ts",[],"C:\\Users\\Brock\\Documents\\GitHub\\Legit Apps\\postgraphile-simple-starter\\client\\src\\hooks\\use-apollo-hook.tsx",[],"C:\\Users\\Brock\\Documents\\GitHub\\Legit Apps\\postgraphile-simple-starter\\client\\src\\components\\forms\\index.ts",[],"C:\\Users\\Brock\\Documents\\GitHub\\Legit Apps\\postgraphile-simple-starter\\client\\src\\components\\forms\\interfaces.ts",[],"C:\\Users\\Brock\\Documents\\GitHub\\Legit Apps\\postgraphile-simple-starter\\client\\src\\components\\forms\\password-field.tsx",["135"],"import { IField } from \"./interfaces\"\r\nimport { InputAdornment, OutlinedInput, IconButton, FormHelperText } from '@material-ui/core'\r\nimport { useField } from \"formik\"\r\nimport { useState } from \"react\"\r\nimport { Visibility, VisibilityOff } from '@material-ui/icons'\r\nimport { FieldWrapper } from \"./field-wrapper\"\r\n\r\ninterface IPasswordField extends IField {\r\n    labelWidth?: number\r\n}\r\n\r\nexport const PasswordField = ({ fieldProps }: { fieldProps: IPasswordField }) => {\r\n    const [field, meta] = useField(fieldProps)\r\n\r\n    const [showPassword, setShowPassword] = useState(true)\r\n\r\n    return (\r\n        <FieldWrapper {...fieldProps} error={meta.error}>\r\n            <OutlinedInput\r\n                {...field}\r\n                error={(meta.touched && !!meta.error) || !!meta.initialError}\r\n                type={showPassword ? 'text' : 'password'}\r\n                endAdornment={\r\n                    <InputAdornment position=\"end\">\r\n                        <IconButton\r\n                            aria-label='toggle password visibility'\r\n                            onClick={() => setShowPassword(!showPassword)}\r\n                            onMouseDown={(e) => e.preventDefault()}\r\n                        >\r\n                            {showPassword ? <Visibility /> : <VisibilityOff />}\r\n                        </IconButton>\r\n                    </InputAdornment>\r\n                }\r\n                labelWidth={fieldProps.labelWidth}\r\n            />\r\n        </FieldWrapper>\r\n    )\r\n}","C:\\Users\\Brock\\Documents\\GitHub\\Legit Apps\\postgraphile-simple-starter\\client\\src\\components\\forms\\text-input.tsx",[],"C:\\Users\\Brock\\Documents\\GitHub\\Legit Apps\\postgraphile-simple-starter\\client\\src\\components\\forms\\constants.ts",[],"C:\\Users\\Brock\\Documents\\GitHub\\Legit Apps\\postgraphile-simple-starter\\client\\src\\components\\forms\\field-wrapper.tsx",[],"C:\\Users\\Brock\\Documents\\GitHub\\Legit Apps\\postgraphile-simple-starter\\client\\src\\styles\\use-form-styles.ts",[],"C:\\Users\\Brock\\Documents\\GitHub\\Legit Apps\\postgraphile-simple-starter\\client\\src\\components\\providers\\index.ts",[],"C:\\Users\\Brock\\Documents\\GitHub\\Legit Apps\\postgraphile-simple-starter\\client\\src\\components\\providers\\theme-provider.tsx",[],"C:\\Users\\Brock\\Documents\\GitHub\\Legit Apps\\postgraphile-simple-starter\\client\\src\\components\\providers\\compose-providers.tsx",[],"C:\\Users\\Brock\\Documents\\GitHub\\Legit Apps\\postgraphile-simple-starter\\client\\src\\components\\providers\\apollo-provider.tsx",[],"C:\\Users\\Brock\\Documents\\GitHub\\Legit Apps\\postgraphile-simple-starter\\client\\src\\components\\providers\\snackbar-provider.tsx",[],"C:\\Users\\Brock\\Documents\\GitHub\\Legit Apps\\postgraphile-simple-starter\\client\\src\\styles\\index.ts",[],"C:\\Users\\Brock\\Documents\\GitHub\\Legit Apps\\postgraphile-simple-starter\\client\\src\\styles\\use-padded-border.ts",[],"C:\\Users\\Brock\\Documents\\GitHub\\Legit Apps\\postgraphile-simple-starter\\client\\src\\components\\signup.tsx",[],"C:\\Users\\Brock\\Documents\\GitHub\\Legit Apps\\postgraphile-simple-starter\\client\\src\\stores\\app-state\\index.ts",[],"C:\\Users\\Brock\\Documents\\GitHub\\Legit Apps\\postgraphile-simple-starter\\client\\src\\stores\\app-state\\app-state-provider.tsx",[],"C:\\Users\\Brock\\Documents\\GitHub\\Legit Apps\\postgraphile-simple-starter\\client\\src\\stores\\app-state\\reducer.ts",[],"C:\\Users\\Brock\\Documents\\GitHub\\Legit Apps\\postgraphile-simple-starter\\client\\src\\stores\\app-state\\definitions.ts",[],{"ruleId":"136","replacedBy":"137"},{"ruleId":"138","replacedBy":"139"},{"ruleId":"140","severity":1,"message":"141","line":38,"column":8,"nodeType":"142","endLine":38,"endColumn":59,"suggestions":"143"},{"ruleId":"140","severity":1,"message":"141","line":43,"column":8,"nodeType":"142","endLine":43,"endColumn":67,"suggestions":"144"},{"ruleId":"140","severity":1,"message":"145","line":53,"column":8,"nodeType":"142","endLine":53,"endColumn":19,"suggestions":"146"},{"ruleId":"140","severity":1,"message":"147","line":102,"column":8,"nodeType":"142","endLine":102,"endColumn":17,"suggestions":"148"},{"ruleId":"149","severity":1,"message":"150","line":10,"column":21,"nodeType":"151","messageId":"152","endLine":10,"endColumn":28},{"ruleId":"140","severity":1,"message":"153","line":30,"column":8,"nodeType":"142","endLine":30,"endColumn":14,"suggestions":"154"},{"ruleId":"140","severity":1,"message":"153","line":34,"column":8,"nodeType":"142","endLine":34,"endColumn":15,"suggestions":"155"},{"ruleId":"149","severity":1,"message":"156","line":2,"column":53,"nodeType":"151","messageId":"152","endLine":2,"endColumn":67},"no-native-reassign",["157"],"no-negated-in-lhs",["158"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatch' and 'enqueueSnackbar'. Either include them or remove the dependency array.","ArrayExpression",["159"],["160"],"React Hook useEffect has missing dependencies: 'clearLocalStorageJwt', 'currentUserQuery', 'currentUserQueryStatus', and 'setLocalStorageJwt'. Either include them or remove the dependency array.",["161"],"React Hook useEffect has missing dependencies: 'doneLoading' and 'loadingStart'. Either include them or remove the dependency array.",["162"],"@typescript-eslint/no-unused-vars","'useMemo' is defined but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 'enqueueSnackbar'. Either include it or remove the dependency array.",["163"],["164"],"'FormHelperText' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"165","fix":"166"},{"desc":"167","fix":"168"},{"desc":"169","fix":"170"},{"desc":"171","fix":"172"},{"desc":"173","fix":"174"},{"desc":"175","fix":"176"},"Update the dependencies array to be: [registerUserStatus.error, registerUserStatus.data, enqueueSnackbar, dispatch]",{"range":"177","text":"178"},"Update the dependencies array to be: [currentUserQueryStatus.error, currentUserQueryStatus.data, enqueueSnackbar, dispatch]",{"range":"179","text":"180"},"Update the dependencies array to be: [clearLocalStorageJwt, currentUserQuery, currentUserQueryStatus, setLocalStorageJwt, state.jwt]",{"range":"181","text":"182"},"Update the dependencies array to be: [doneLoading, loading, loadingStart]",{"range":"183","text":"184"},"Update the dependencies array to be: [data, enqueueSnackbar]",{"range":"185","text":"186"},"Update the dependencies array to be: [enqueueSnackbar, error]",{"range":"187","text":"188"},[2038,2089],"[registerUserStatus.error, registerUserStatus.data, enqueueSnackbar, dispatch]",[2411,2470],"[currentUserQueryStatus.error, currentUserQueryStatus.data, enqueueSnackbar, dispatch]",[2759,2770],"[clearLocalStorageJwt, currentUserQuery, currentUserQueryStatus, setLocalStorageJwt, state.jwt]",[3425,3434],"[doneLoading, loading, loadingStart]",[1211,1217],"[data, enqueueSnackbar]",[1350,1357],"[enqueueSnackbar, error]"]