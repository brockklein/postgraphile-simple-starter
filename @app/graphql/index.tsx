/* DO NOT EDIT! This file is auto-generated by graphql-code-generator - see `codegen.yml` */
import gql from 'graphql-tag';
export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /** A universally unique identifier as defined by [RFC 4122](https://tools.ietf.org/html/rfc4122). */
  UUID: any;
  /**
   * A point in time as described by the [ISO
   * 8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
   */
  Datetime: string;
  /** A location in a connection that can be used for resuming pagination. */
  Cursor: any;
  /**
   * A JSON Web Token defined by [RFC 7519](https://tools.ietf.org/html/rfc7519)
   * which securely represents claims between two parties.
   */
  JwtToken: any;
};

/** The root query type which gives access points into the data universe. */
export type Query = Node & {
  __typename?: 'Query';
  /**
   * Exposes the root query type nested one level down. This is helpful for Relay 1
   * which can only query top level fields if they are in a particular form.
   */
  query: Query;
  /** The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`. */
  nodeId: Scalars['ID'];
  /** Fetches an object given its globally unique `ID`. */
  node?: Maybe<Node>;
  /** Reads and enables pagination through a set of `UserProfile`. */
  allUserProfiles?: Maybe<UserProfilesConnection>;
  userProfileByUserId?: Maybe<UserProfile>;
  /** Gets the user who was identified by our JWT. */
  currentUser?: Maybe<UserProfile>;
  /** Reads a single `UserProfile` using its globally unique `ID`. */
  userProfile?: Maybe<UserProfile>;
};


/** The root query type which gives access points into the data universe. */
export type QueryNodeArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryAllUserProfilesArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<UserProfilesOrderBy>>;
  condition?: Maybe<UserProfileCondition>;
};


/** The root query type which gives access points into the data universe. */
export type QueryUserProfileByUserIdArgs = {
  userId: Scalars['UUID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryUserProfileArgs = {
  nodeId: Scalars['ID'];
};

/** An object with a globally unique `ID`. */
export type Node = {
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
};

/** A connection to a list of `UserProfile` values. */
export type UserProfilesConnection = {
  __typename?: 'UserProfilesConnection';
  /** A list of `UserProfile` objects. */
  nodes: Array<UserProfile>;
  /** A list of edges which contains the `UserProfile` and cursor to aid in pagination. */
  edges: Array<UserProfilesEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `UserProfile` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/**
 * `user_profile` is a user's publicly visible demographic information. <br><br>
 * 
 * A profile maintains a one-to-one connection with a user's `user_account` via the `user_id` foreign key. This is used as the primary key on this table to enforce the one-to-one relationship and not allow a one-to-many (more than one `user_profile` for a `user_account`).
 */
export type UserProfile = Node & {
  __typename?: 'UserProfile';
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
  /** A foreign key reference to the user's `user_id` in their `user_account` record. */
  userId: Scalars['UUID'];
  /** When the user's profile was created. */
  createdAt: Scalars['Datetime'];
  /** The last time the user's profile was updated. */
  updatedAt: Scalars['Datetime'];
  /** The user's first name. */
  firstName?: Maybe<Scalars['String']>;
  /** The user's last name. */
  lastName?: Maybe<Scalars['String']>;
  /** A user's full name which is a concatenation of their first and last name. */
  fullName?: Maybe<Scalars['String']>;
};



/** A `UserProfile` edge in the connection. */
export type UserProfilesEdge = {
  __typename?: 'UserProfilesEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `UserProfile` at the end of the edge. */
  node: UserProfile;
};


/** Information about pagination in a connection. */
export type PageInfo = {
  __typename?: 'PageInfo';
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['Cursor']>;
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['Cursor']>;
};

/** Methods to use when ordering `UserProfile`. */
export enum UserProfilesOrderBy {
  Natural = 'NATURAL',
  UserIdAsc = 'USER_ID_ASC',
  UserIdDesc = 'USER_ID_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

/**
 * A condition to be used against `UserProfile` object types. All fields are tested
 * for equality and combined with a logical ‘and.’
 */
export type UserProfileCondition = {
  /** Checks for equality with the object’s `userId` field. */
  userId?: Maybe<Scalars['UUID']>;
};

/** The root mutation type which contains root level fields which mutate data. */
export type Mutation = {
  __typename?: 'Mutation';
  /** Updates a single `UserProfile` using its globally unique id and a patch. */
  updateUserProfile?: Maybe<UpdateUserProfilePayload>;
  /** Updates a single `UserProfile` using a unique key and a patch. */
  updateUserProfileByUserId?: Maybe<UpdateUserProfilePayload>;
  /** Deletes a single `UserProfile` using its globally unique id. */
  deleteUserProfile?: Maybe<DeleteUserProfilePayload>;
  /** Deletes a single `UserProfile` using a unique key. */
  deleteUserProfileByUserId?: Maybe<DeleteUserProfilePayload>;
  /** Creates a JWT token that will securely identify a user and give them certain permissions. This token expires in 2 days. */
  authenticate?: Maybe<AuthenticatePayload>;
  /** Registers a single user creating their profile (user_profile) and an account (user_account). */
  registerPerson?: Maybe<RegisterPersonPayload>;
  /** Registers a single user creating their profile (user_profile) and an account (user_account). */
  registerUser?: Maybe<RegisterUserPayload>;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateUserProfileArgs = {
  input: UpdateUserProfileInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateUserProfileByUserIdArgs = {
  input: UpdateUserProfileByUserIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteUserProfileArgs = {
  input: DeleteUserProfileInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteUserProfileByUserIdArgs = {
  input: DeleteUserProfileByUserIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationAuthenticateArgs = {
  input: AuthenticateInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationRegisterPersonArgs = {
  input: RegisterPersonInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationRegisterUserArgs = {
  input: RegisterUserInput;
};

/** The output of our update `UserProfile` mutation. */
export type UpdateUserProfilePayload = {
  __typename?: 'UpdateUserProfilePayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `UserProfile` that was updated by this mutation. */
  userProfile?: Maybe<UserProfile>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `UserProfile`. May be used by Relay 1. */
  userProfileEdge?: Maybe<UserProfilesEdge>;
};


/** The output of our update `UserProfile` mutation. */
export type UpdateUserProfilePayloadUserProfileEdgeArgs = {
  orderBy?: Maybe<Array<UserProfilesOrderBy>>;
};

/** All input for the `updateUserProfile` mutation. */
export type UpdateUserProfileInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `UserProfile` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `UserProfile` being updated. */
  userProfilePatch: UserProfilePatch;
};

/** Represents an update to a `UserProfile`. Fields that are set will be updated. */
export type UserProfilePatch = {
  /** A foreign key reference to the user's `user_id` in their `user_account` record. */
  userId?: Maybe<Scalars['UUID']>;
  /** When the user's profile was created. */
  createdAt?: Maybe<Scalars['Datetime']>;
  /** The last time the user's profile was updated. */
  updatedAt?: Maybe<Scalars['Datetime']>;
  /** The user's first name. */
  firstName?: Maybe<Scalars['String']>;
  /** The user's last name. */
  lastName?: Maybe<Scalars['String']>;
};

/** All input for the `updateUserProfileByUserId` mutation. */
export type UpdateUserProfileByUserIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** An object where the defined keys will be set on the `UserProfile` being updated. */
  userProfilePatch: UserProfilePatch;
  /** A foreign key reference to the user's `user_id` in their `user_account` record. */
  userId: Scalars['UUID'];
};

/** The output of our delete `UserProfile` mutation. */
export type DeleteUserProfilePayload = {
  __typename?: 'DeleteUserProfilePayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `UserProfile` that was deleted by this mutation. */
  userProfile?: Maybe<UserProfile>;
  deletedUserProfileId?: Maybe<Scalars['ID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `UserProfile`. May be used by Relay 1. */
  userProfileEdge?: Maybe<UserProfilesEdge>;
};


/** The output of our delete `UserProfile` mutation. */
export type DeleteUserProfilePayloadUserProfileEdgeArgs = {
  orderBy?: Maybe<Array<UserProfilesOrderBy>>;
};

/** All input for the `deleteUserProfile` mutation. */
export type DeleteUserProfileInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `UserProfile` to be deleted. */
  nodeId: Scalars['ID'];
};

/** All input for the `deleteUserProfileByUserId` mutation. */
export type DeleteUserProfileByUserIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** A foreign key reference to the user's `user_id` in their `user_account` record. */
  userId: Scalars['UUID'];
};

/** The output of our `authenticate` mutation. */
export type AuthenticatePayload = {
  __typename?: 'AuthenticatePayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  jwtToken?: Maybe<Scalars['JwtToken']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** All input for the `authenticate` mutation. */
export type AuthenticateInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  email: Scalars['String'];
  password: Scalars['String'];
};

/** The output of our `registerPerson` mutation. */
export type RegisterPersonPayload = {
  __typename?: 'RegisterPersonPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  userProfile?: Maybe<UserProfile>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `UserProfile`. May be used by Relay 1. */
  userProfileEdge?: Maybe<UserProfilesEdge>;
};


/** The output of our `registerPerson` mutation. */
export type RegisterPersonPayloadUserProfileEdgeArgs = {
  orderBy?: Maybe<Array<UserProfilesOrderBy>>;
};

/** All input for the `registerPerson` mutation. */
export type RegisterPersonInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  firstName: Scalars['String'];
  lastName: Scalars['String'];
  email: Scalars['String'];
  password: Scalars['String'];
};

/** The output of our `registerUser` mutation. */
export type RegisterUserPayload = {
  __typename?: 'RegisterUserPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  userProfile?: Maybe<UserProfile>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `UserProfile`. May be used by Relay 1. */
  userProfileEdge?: Maybe<UserProfilesEdge>;
};


/** The output of our `registerUser` mutation. */
export type RegisterUserPayloadUserProfileEdgeArgs = {
  orderBy?: Maybe<Array<UserProfilesOrderBy>>;
};

/** All input for the `registerUser` mutation. */
export type RegisterUserInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: Maybe<Scalars['String']>;
  firstName: Scalars['String'];
  lastName: Scalars['String'];
  email: Scalars['String'];
  password: Scalars['String'];
};
